org 0x49C
START:
    CLA             ; Очистка аккумулятора
    ST 0x4B7        ; Записать значение аккумулятора (0) в ячейку 0x4B7 (R)

    LD 0x4B6        ; Загрузить значение X (из ячейки 0x4B6) в аккумулятор
    DEC             ; Декремент аккумулятора (X-1)
    PUSH            ; Запись значения (X-1) в стек SP
    CALL 0x668      ; Вызов подпрограммы F(X-1)
    POP             ; Записать результат F(X-1) из стека в аккумулятор
    DEC             ; Временное декрементирование аккумулятора
    SUB 0x4B7       ; Вычесть из аккумулятора значение R (из ячейки 0x4B7)
    ST 0x4B7        ; Сохранить временный результат в ячейку 0x4B7

    LD 0x4B5        ; Загрузить значение Y (из ячейки 0x4B5) в аккумулятор
    INC             ; Инкремент аккумулятора (Y+1)
    PUSH            ; Запись значения (Y+1) в стек
    CALL 0x668      ; Вызов подпрограммы F(Y+1)
    POP             ; Записать результат F(Y+1) из стека в аккумулятор
    SUB 0x4B7       ; Вычесть из аккумулятора временное значение R (из ячейки 0x4B7)
    ST 0x4B7        ; Сохранить временный результат в ячейку 0x4B7

    LD 0x4B4        ; Загрузить значение Z (из ячейки 0x4B4) в аккумулятор
    PUSH            ; Запись значения Z в стек
    CALL 0x668      ; Вызов подпрограммы F(Z)
    POP             ; Записать результат F(Z) из стека в аккумулятор
    ADD 0x4B7       ; Прибавить к аккумулятору временное значение R (из ячейки 0x4B7)
    ST 0x4B7        ; Записать окончательное значение R в ячейку 0x4B7
    HLT             ; Остановка

org 0x668
F_FUNC:
    LD &1           ; Загрузить аргумент из стека в аккумулятор
    BEQ F_ZERO      ; Перейти, если аргумент равен 0
    BPL F_POS       ; Перейти, если аргумент неотрицательный

F_NEG:
    SUB CONST_A     ; Вычесть A (-2192) из аккумулятора
    BMI F_NEG_A     ; Перейти, если результат отрицательный (аргумент < -2192)
    JUMP F_A        ; Перейти, если результат неотрицательный (-2192 <= аргумент < 0)

F_NEG_A:
    ADD CONST_A     ; Прибавить A (-2192) к аккумулятору (восстановление исходного значения)

F_POS:
    ASL             ; Умножить на 2
    ASL             ; Умножить на 2 (итого умножение на 4)
    SUB SP_DEC      ; Уменьшить указатель стека
    ADD CONST_B     ; Прибавить B (285)
    JUMP F_END      ; Перейти к концу подпрограммы

F_ZERO:
    ASL             ; Умножить на 2
    ASL             ; Умножить на 2 (итого умножение на 4)
    SUB SP_DEC      ; Уменьшить указатель стека
    ADD CONST_B     ; Прибавить B (285)
    JUMP F_END      ; Перейти к концу подпрограммы

F_A:
    LD CONST_A      ; Загрузить A (-2192) в аккумулятор

F_END:
    ST &1           ; Поместить результат в стек
    RET             ; Возврат из подпрограммы

org 0x4B4
Z:      word 0x000A     ; Произвольное значение для Z (10)
Y:      word 0xFFFB     ; Произвольное значение для Y (-5)
X:      word 0xF768     ; Произвольное значение для X (-2200)
R:      word 0x0000     ; Результат

org 0x677
CONST_A:    word 0xF770     ; A = -2192
CONST_B:    word 0x011D     ; B = 285
SP_DEC:     word 0x0001     ; Константа 1 для декремента SP